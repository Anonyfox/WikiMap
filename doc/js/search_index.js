var search_data = {"index":{"searchIndex":["addpagetable","applicationcontroller","database","datacontroller","graphvizsimple","init","mainwindow","page","pagecontroller","shoes","internetstatus","itemurl","mindmap","optionslist","statusbar","titlebar","wikiclient","add_edge()","add_node()","add_target_pages()","add_uncrawled_page()","ask()","ask_wiki_for()","build_query_url()","build_search_url()","crawl_page()","down()","draw_error_screen()","draw_hovered()","draw_main_window()","draw_mindmap()","draw_normal()","draw_normal()","draw_normal()","draw_normal()","draw_normal()","draw_options()","draw_wait_screen()","draw_welcome_screen()","draw_window()","drop!()","exists?()","generate_attributes()","generate_markup()","get()","get()","inc()","internet_available?()","look_for()","lookup_target_pages()","lookup_text()","migrate!()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","on_startup()","output()","output()","page_exists?()","render()","render_and_save()","response_links()","response_list()","search_matching_links_to()","set()","set_focus()","store()","switch_off()","switch_on()","up()","write()","write()","readme"],"longSearchIndex":["addpagetable","applicationcontroller","database","datacontroller","graphvizsimple","init","mainwindow","page","pagecontroller","shoes","shoes::internetstatus","shoes::itemurl","shoes::mindmap","shoes::optionslist","shoes::statusbar","shoes::titlebar","wikiclient","graphvizsimple#add_edge()","graphvizsimple#add_node()","pagecontroller#add_target_pages()","pagecontroller#add_uncrawled_page()","wikiclient::ask()","applicationcontroller#ask_wiki_for()","wikiclient::build_query_url()","wikiclient::build_search_url()","applicationcontroller#crawl_page()","addpagetable::down()","shoes::mindmap#draw_error_screen()","shoes::itemurl#draw_hovered()","applicationcontroller#draw_main_window()","applicationcontroller#draw_mindmap()","shoes::itemurl#draw_normal()","shoes::mindmap#draw_normal()","shoes::optionslist#draw_normal()","shoes::statusbar#draw_normal()","shoes::titlebar#draw_normal()","applicationcontroller#draw_options()","shoes::mindmap#draw_wait_screen()","shoes::mindmap#draw_welcome_screen()","mainwindow#draw_window()","database#drop!()","database#exists?()","graphvizsimple#generate_attributes()","graphvizsimple#generate_markup()","database#get()","wikiclient::get()","shoes::statusbar#inc()","datacontroller#internet_available?()","datacontroller#look_for()","pagecontroller#lookup_target_pages()","shoes::titlebar#lookup_text()","database#migrate!()","applicationcontroller::new()","database::new()","datacontroller::new()","graphvizsimple::new()","mainwindow::new()","pagecontroller::new()","shoes::internetstatus::new()","shoes::itemurl::new()","shoes::mindmap::new()","shoes::optionslist::new()","shoes::statusbar::new()","shoes::titlebar::new()","init::on_startup()","graphvizsimple#output()","wikiclient::output()","pagecontroller#page_exists?()","datacontroller#render()","shoes::optionslist#render_and_save()","wikiclient::response_links()","wikiclient::response_list()","datacontroller#search_matching_links_to()","shoes::statusbar#set()","shoes::titlebar#set_focus()","database#store()","shoes::internetstatus#switch_off()","shoes::internetstatus#switch_on()","addpagetable::up()","shoes::statusbar#write()","shoes::titlebar#write()",""],"info":[["AddPageTable","","AddPageTable.html","","<p>This class contains the table description inside the  database.  Just run\nthis script to create the correct …\n"],["ApplicationController","","ApplicationController.html","","<p>This class is the main controller of the application.  it merges the\nWikiClient with the PageController …\n"],["DataBase","","DataBase.html","",""],["DataController","","DataController.html","",""],["GraphvizSimple","","GraphvizSimple.html","","<p>require ‘GraphvizSimple’ g = GraphvizSimple.new(“G”) g.node_attributes =\n{“style” …\n"],["Init","","Init.html","",""],["MainWindow","","MainWindow.html","",""],["Page","","Page.html","","<p>This Model-Class is widely empty, because the mighty activerecord library\nmaps this class onto a database-table. …\n"],["PageController","","PageController.html","",""],["Shoes","","Shoes.html","",""],["Shoes::InternetStatus","","Shoes/InternetStatus.html","",""],["Shoes::ItemUrl","","Shoes/ItemUrl.html","",""],["Shoes::MindMap","","Shoes/MindMap.html","",""],["Shoes::OptionsList","","Shoes/OptionsList.html","",""],["Shoes::StatusBar","","Shoes/StatusBar.html","",""],["Shoes::TitleBar","","Shoes/TitleBar.html","",""],["WikiClient","","WikiClient.html","","<p>This standalone Module builds the correct URLs for requesting wikipedia,\nand implements the full http …\n"],["add_edge","GraphvizSimple","GraphvizSimple.html#method-i-add_edge","(from_node, to_node)","<p>Add a new edge to the graph\n<p>from_node: The name of the existing node to start the edge from\n<p>to_node: The …\n"],["add_node","GraphvizSimple","GraphvizSimple.html#method-i-add_node","(name, node_attributes = {})","<p>Add a new node to the graph\n<p>name: A unique name for this node\n<p>node_attributes (optional): Key-value hash …\n"],["add_target_pages","PageController","PageController.html#method-i-add_target_pages","(list=[])","<p>go through the given phrases-array, lookup the pages,  create pages which\nare missing, and return a complete …\n"],["add_uncrawled_page","PageController","PageController.html#method-i-add_uncrawled_page","(name)","<p>add a new page with the givem phrase and return its id. If a page with this\nphrase is existing yet, just …\n"],["ask","WikiClient","WikiClient.html#method-c-ask","(search_str)","<p>Request the given URL, get the page content, format the stuff to JSON and\nreturn the wanted informations …\n"],["ask_wiki_for","ApplicationController","ApplicationController.html#method-i-ask_wiki_for","(str)","<p>look into wikipedia if the given string matches any topics, return an array\nof topics, and update the …\n"],["build_query_url","WikiClient","WikiClient.html#method-c-build_query_url","(str)","<p>build a valid request-url with the given string. if this string is not a\nvalid Wikipedia-Topic, you will …\n"],["build_search_url","WikiClient","WikiClient.html#method-c-build_search_url","(str)","<p>build a valid request-url with the given string. this url should be used to\nfind matching topics to the …\n"],["crawl_page","ApplicationController","ApplicationController.html#method-i-crawl_page","(str)","<p>Go to the site which matches the given string, extract all the links from\nthere, update the database …\n"],["down","AddPageTable","AddPageTable.html#method-c-down","()","<p>Delete the whole :pages table. All data will be lost!\n"],["draw_error_screen","Shoes::MindMap","Shoes/MindMap.html#method-i-draw_error_screen","()",""],["draw_hovered","Shoes::ItemUrl","Shoes/ItemUrl.html#method-i-draw_hovered","()",""],["draw_main_window","ApplicationController","ApplicationController.html#method-i-draw_main_window","()","<p>Draw the main window and set the gui elements ready-to-use\n"],["draw_mindmap","ApplicationController","ApplicationController.html#method-i-draw_mindmap","(ary=[])","<p>Print all the found keywords as klickable text (=links) in  a nice\nformatted list. This method expects …\n"],["draw_normal","Shoes::ItemUrl","Shoes/ItemUrl.html#method-i-draw_normal","()",""],["draw_normal","Shoes::MindMap","Shoes/MindMap.html#method-i-draw_normal","(image_path=nil)",""],["draw_normal","Shoes::OptionsList","Shoes/OptionsList.html#method-i-draw_normal","(list=[])",""],["draw_normal","Shoes::StatusBar","Shoes/StatusBar.html#method-i-draw_normal","()",""],["draw_normal","Shoes::TitleBar","Shoes/TitleBar.html#method-i-draw_normal","(start_string=nil)",""],["draw_options","ApplicationController","ApplicationController.html#method-i-draw_options","(params)","<p>Update the View of the options_list with the given informations. This\nmethod takes different arguments …\n"],["draw_wait_screen","Shoes::MindMap","Shoes/MindMap.html#method-i-draw_wait_screen","()",""],["draw_welcome_screen","Shoes::MindMap","Shoes/MindMap.html#method-i-draw_welcome_screen","()",""],["draw_window","MainWindow","MainWindow.html#method-i-draw_window","()",""],["drop!","DataBase","DataBase.html#method-i-drop-21","()",""],["exists?","DataBase","DataBase.html#method-i-exists-3F","(key)",""],["generate_attributes","GraphvizSimple","GraphvizSimple.html#method-i-generate_attributes","(attributes, seperator = \", \")",""],["generate_markup","GraphvizSimple","GraphvizSimple.html#method-i-generate_markup","()",""],["get","DataBase","DataBase.html#method-i-get","(key)",""],["get","WikiClient","WikiClient.html#method-c-get","(query_str)","<p>Request the given URL, parse the response to JSON, and return  the wanted\nphrases as an Array\n"],["inc","Shoes::StatusBar","Shoes/StatusBar.html#method-i-inc","(number)","<p>Inkrementiert den Fortschritt der Progressbar um eine Größe number number\nmust be between 0.0 and 1.0 …\n"],["internet_available?","DataController","DataController.html#method-i-internet_available-3F","()","<p>simply checks if internet is available by pinging google.com\n"],["look_for","DataController","DataController.html#method-i-look_for","(name)","<p>returns the requested data for the given name\n"],["lookup_target_pages","PageController","PageController.html#method-i-lookup_target_pages","()","<p>lists all pages the corresponding links are referring to\n"],["lookup_text","Shoes::TitleBar","Shoes/TitleBar.html#method-i-lookup_text","()","<p>Sucht nach einem gegebenen Suchstring\n"],["migrate!","DataBase","DataBase.html#method-i-migrate-21","()",""],["new","ApplicationController","ApplicationController.html#method-c-new","()","<p>This Action creates the main window, an sets everything ready-to-use\n"],["new","DataBase","DataBase.html#method-c-new","()",""],["new","DataController","DataController.html#method-c-new","()","<p>the DataController handles all the loading/storing stuff. very easy.\n"],["new","GraphvizSimple","GraphvizSimple.html#method-c-new","(graph_name, graph_attributes = {}, node_attributes = {}, edge_attributes = {})","<p>Create a new instance of GraphvizSimple\n"],["new","MainWindow","MainWindow.html#method-c-new","(main_window)",""],["new","PageController","PageController.html#method-c-new","(params)","<p>create a new page. expects a phrase and a link list. opens an existing page\nif there is one. The link …\n"],["new","Shoes::InternetStatus","Shoes/InternetStatus.html#method-c-new","()",""],["new","Shoes::ItemUrl","Shoes/ItemUrl.html#method-c-new","(name, &block)",""],["new","Shoes::MindMap","Shoes/MindMap.html#method-c-new","(path=nil)",""],["new","Shoes::OptionsList","Shoes/OptionsList.html#method-c-new","(start_list=[])",""],["new","Shoes::StatusBar","Shoes/StatusBar.html#method-c-new","(start_text=\"\")",""],["new","Shoes::TitleBar","Shoes/TitleBar.html#method-c-new","(start_string=nil)",""],["on_startup","Init","Init.html#method-c-on_startup","(app)",""],["output","GraphvizSimple","GraphvizSimple.html#method-i-output","(output_file, output_type = \"png\", render_mode = \"circo\", args = [])","<p>Output this graph to a file.\n<p>output_file: The name of the file to write to, including path, if any.\n<p>output_type …\n"],["output","WikiClient","WikiClient.html#method-c-output","(phrase, links=[], destination=nil, thumbnail=true)",""],["page_exists?","PageController","PageController.html#method-i-page_exists-3F","(phrase)","<p>simply check if there is a page with the given phrase\n"],["render","DataController","DataController.html#method-i-render","(root, links, destination, thumb=true)",""],["render_and_save","Shoes::OptionsList","Shoes/OptionsList.html#method-i-render_and_save","(name)",""],["response_links","WikiClient","WikiClient.html#method-c-response_links","(json)","<p>the helper method of of WikiClient.get, which extracts the wanted links\nfrom the JSON-Object and returns …\n"],["response_list","WikiClient","WikiClient.html#method-c-response_list","(json)","<p>a helper method to extract the Names-list of the JSON-object of the ask\nmethod\n"],["search_matching_links_to","DataController","DataController.html#method-i-search_matching_links_to","(name)","<p>get a list of possible links similar to the given name\n"],["set","Shoes::StatusBar","Shoes/StatusBar.html#method-i-set","(number)",""],["set_focus","Shoes::TitleBar","Shoes/TitleBar.html#method-i-set_focus","()",""],["store","DataBase","DataBase.html#method-i-store","(key, dataset)",""],["switch_off","Shoes::InternetStatus","Shoes/InternetStatus.html#method-i-switch_off","()",""],["switch_on","Shoes::InternetStatus","Shoes/InternetStatus.html#method-i-switch_on","()",""],["up","AddPageTable","AddPageTable.html#method-c-up","()","<p>create the table :pages.\n"],["write","Shoes::StatusBar","Shoes/StatusBar.html#method-i-write","(text)",""],["write","Shoes::TitleBar","Shoes/TitleBar.html#method-i-write","(text)",""],["README","","README.html","","<p>Das Repo zum WikiMap (Wikipedia Mindmap). Projektverwaltung findet im\nRedmine statt!\n<p>Kurze Erklärung zu …\n"]]}}